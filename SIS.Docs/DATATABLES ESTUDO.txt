/**
 * Page User List
 */

'use strict';

// Datatable (js)
document.addEventListener('DOMContentLoaded', function (e) {

  let borderColor, bodyBg, headingColor;

  borderColor = config.colors.borderColor;
  bodyBg = config.colors.bodyBg;
  headingColor = config.colors.headingColor;

  // Variable declaration for table
  const dt_user_table = document.querySelector('.datatables-users'),
    userView = 'app-user-view-account.html',
    statusObj = {
      1: { title: 'Pending', class: 'bg-label-warning' },
      2: { title: 'Active', class: 'bg-label-success' },
      3: { title: 'Inactive', class: 'bg-label-secondary' }
    };



  // Users datatable
  if (dt_user_table) {

    const dt_user = new DataTable(dt_user_table,
      {
        ajax: assetsPath + 'json/user-list.json', // JSON file to add data

        columns: [
          // columns according to JSON        
          { data: 'full_name' },
          { data: 'role' },
          { data: 'current_plan' },
          { data: 'billing' },
          { data: 'status' },
          { data: 'action' }
        ],
        columnDefs: [
          {
            // For Responsive
            className: 'control',
            searchable: false,
            orderable: false,
            responsivePriority: 2,
            targets: 0,
            render: function (data, type, full, meta) {
              return '';
            }
          },
          {
            // Plans
            targets: 1,
            render: function (data, type, full, meta) {
              const id = full['id'];

              return '<span class="text-heading">' + id + '</span>';
            }
          },
          //{
          //  // For Checkboxes
          //  targets: 1,
          //  orderable: false,
          //  searchable: false,
          //  responsivePriority: 4,
          //  checkboxes: true,
          //  render: function () {
          //    return '<input type="checkbox" class="dt-checkboxes form-check-input">';
          //  },
          //  checkboxes:
          //  {
          //    selectAllRender: '<input type="checkbox" class="form-check-input">'
          //  }
          //},
          {
            targets: 2,
            responsivePriority: 3,
            render: function (data, type, full, meta) {
              var name = full['full_name'];
              var email = full['email'];
              var image = full['avatar'];
              var output;

              if (image) {
                // For Avatar image
                output = '<img src="' + assetsPath + 'img/avatars/' + image + '" alt="Avatar" class="rounded-circle">';
              }
              else {
                // For Avatar badge
                var stateNum = Math.floor(Math.random() * 6);
                var states = ['success', 'danger', 'warning', 'info', 'dark', 'primary', 'secondary'];
                var state = states[stateNum];
                var initials = (name.match(/\b\w/g) || []).map(char => char.toUpperCase());
                initials = ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();
                output = '<span class="avatar-initial rounded-circle bg-label-' + state + '">' + initials + '</span>';
              }

              // Creates full output for row
              var row_output =
                '<div class="d-flex justify-content-start align-items-center user-name">' +
                '<div class="avatar-wrapper">' +
                '<div class="avatar avatar-sm me-4">' +
                output +
                '</div>' +
                '</div>' +
                '<div class="d-flex flex-column">' +
                '<a href="' +
                userView +
                '" class="text-heading text-truncate"><span class="fw-medium">' +
                name +
                '</span></a>' +
                '<small>' +
                email +
                '</small>' +
                '</div>' +
                '</div>';
              return row_output;
            }
          },
          {
            targets: 3,
            render: function (data, type, full, meta) {
              var role = full['role'];
              var roleBadgeObj = {
                Subscriber: '<i class="icon-base ti tabler-crown icon-md text-primary me-2"></i>',
                Author: '<i class="icon-base ti tabler-edit icon-md text-warning me-2"></i>',
                Maintainer: '<i class="icon-base ti tabler-user icon-md text-success me-2"></i>',
                Editor: '<i class="icon-base ti tabler-chart-pie icon-md text-info me-2"></i>',
                Admin: '<i class="icon-base ti tabler-device-desktop icon-md text-danger me-2"></i>'
              };
              return (
                "<span class='text-truncate d-flex align-items-center text-heading'>" +
                (roleBadgeObj[role] || '') + // Ensures badge exists for the role
                role +
                '</span>'
              );
            }
          },
          {
            // Plans
            targets: 4,
            render: function (data, type, full, meta) {
              const plan = full['current_plan'];

              return '<span class="text-heading">' + plan + '</span>';
            }
          },
          {
            // Plans
            targets: 5,
            render: function (data, type, full, meta) {
              const plan = full['current_plan'];

              return '<span class="text-heading">' + plan + '</span>';
            }
          },
          {
            // User Status
            targets: 6,
            render: function (data, type, full, meta) {
              const status = full['status'];

              return (
                '<span class="badge ' +
                statusObj[status].class +
                '" text-capitalized>' +
                statusObj[status].title +
                '</span>'
              );
            }
          },
          {
            targets: 7,
            title: 'Actions',
            searchable: false,
            orderable: false,
            render: (data, type, full, meta) => {
              return `
              <div class="d-flex align-items-center">
                <a href="javascript:;" class="btn btn-text-secondary rounded-pill waves-effect btn-icon delete-record">
                  <i class="icon-base ti tabler-trash icon-22px"></i>
                </a>
                <a href="${userView}" class="btn btn-text-secondary rounded-pill waves-effect btn-icon">
                  <i class="icon-base ti tabler-eye icon-22px"></i>
                </a>
                <a href="javascript:;" class="btn btn-text-secondary rounded-pill waves-effect btn-icon dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                  <i class="icon-base ti tabler-dots-vertical icon-22px"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-end m-0">
                  <a href="javascript:;" class="dropdown-item">Edit</a>
                  <a href="javascript:;" class="dropdown-item">Suspend</a>
                </div>
              </div>
            `;
            }
          }
        ],


        select: {
          style: 'multi',
          selector: 'td:nth-child(2)'
        },

        order: [[1, 'asc']],


        layout:
        {
          topStart:
          {
            rowClass: 'row m-3 my-0 justify-content-between',
            features: [
              {
                pageLength: {
                  menu: [10, 25, 50, 100],
                  text: '_MENU_'
                }
              }
            ]
          },

          topEnd:
          {
            features: [
              {
                search: {
                  placeholder: 'Pesquisar',
                  text: '_INPUT_'
                }
              }
            ]
          },

          bottomStart: {
            rowClass: 'row mx-3 justify-content-between',
            features: ['info']
          },
          bottomEnd: 'paging'
        },


        language: {
          sLengthMenu: '_MENU_',
          search: '',
          searchPlaceholder: 'Pesquisar',
          paginate: {
            next: '<i class="icon-base ti tabler-chevron-right scaleX-n1-rtl icon-18px"></i>',
            previous: '<i class="icon-base ti tabler-chevron-left scaleX-n1-rtl icon-18px"></i>',
            first: '<i class="icon-base ti tabler-chevrons-left scaleX-n1-rtl icon-18px"></i>',
            last: '<i class="icon-base ti tabler-chevrons-right scaleX-n1-rtl icon-18px"></i>'
          }
        },


        // For responsive popup
        responsive: {
          details: {
            display: DataTable.Responsive.display.modal({
              header: function (row) {
                const data = row.data();
                return 'Details of ' + data['full_name'];
              }
            }),
            type: 'column',
            renderer: function (api, rowIdx, columns) {
              const data = columns
                .map(function (col) {
                  return col.title !== '' // Do not show row in modal popup if title is blank (for check box)
                    ? `<tr data-dt-row="${col.rowIndex}" data-dt-column="${col.columnIndex}">
                      <td>${col.title}:</td>
                      <td>${col.data}</td>
                    </tr>`
                    : '';
                })
                .join('');

              if (data) {
                const div = document.createElement('div');
                div.classList.add('table-responsive');
                const table = document.createElement('table');
                div.appendChild(table);
                table.classList.add('table');
                const tbody = document.createElement('tbody');
                tbody.innerHTML = data;
                table.appendChild(tbody);
                return div;
              }
              return false;
            }
          }
        }
      });

  }

  // Filter form control to default size
  // ? setTimeout used for user-list table initialization
  setTimeout(() => {
    const elementsToModify = [
      { selector: '.dt-buttons .btn', classToRemove: 'btn-secondary' },
      { selector: '.dt-search .form-control', classToRemove: 'form-control-sm' },
      { selector: '.dt-length .form-select', classToRemove: 'form-select-sm', classToAdd: 'ms-0' },
      { selector: '.dt-length', classToAdd: 'mb-md-6 mb-0' },
      {
        selector: '.dt-layout-end',
        classToRemove: 'justify-content-between',
        classToAdd: 'd-flex gap-md-4 justify-content-md-between justify-content-center gap-2 flex-wrap'
      },
      { selector: '.dt-buttons', classToAdd: 'd-flex gap-4 mb-md-0 mb-4' },
      { selector: '.dt-layout-table', classToRemove: 'row mt-2' },
      { selector: '.dt-layout-full', classToRemove: 'col-md col-12', classToAdd: 'table-responsive' }
    ];

    // Delete record
    elementsToModify.forEach(({ selector, classToRemove, classToAdd }) => {
      document.querySelectorAll(selector).forEach(element => {
        if (classToRemove) {
          classToRemove.split(' ').forEach(className => element.classList.remove(className));
        }
        if (classToAdd) {
          classToAdd.split(' ').forEach(className => element.classList.add(className));
        }
      });
    });
  }, 100);




});
